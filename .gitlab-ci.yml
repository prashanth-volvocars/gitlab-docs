default:
  image: registry.gitlab.com/gitlab-org/gitlab-docs:base
  tags:
    - gitlab-org
  # Check Ruby version and install gems
  before_script:
    - ruby -v
    - NOKOGIRI_USE_SYSTEM_LIBRARIES=1 bundle install --jobs 4 --path vendor


stages:
  - build-images
  - build
  - test
  - pre-deploy
  - deploy
  - post-deploy

#
# Pick the remote branch, by default master (see the Rakefile for more info)
#
variables:
  BRANCH_EE: '12-10-stable-ee'
  BRANCH_OMNIBUS: '12-10-stable'
  BRANCH_RUNNER: '12-10-stable'
  BRANCH_CHARTS: '3-3-stable'
  BUNDLE_PATH__SYSTEM: 'false'
  GIT_DEPTH: '20'

#
# Retry a job automatically if it fails (2 times)
#
.retry:
  retry: 2

#
# Rules to determine which pipelines jobs will run in.
#
.rules_scheduled:
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: never
    - if: '$PIPELINE_SCHEDULE_TIMING == "weekly"'
    - if: '$PIPELINE_SCHEDULE_TIMING == "hourly"'
      when: manual
      allow_failure: true

.rules_scheduled_manual:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
      when: manual
      allow_failure: true

.rules_site_tests:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
    - if: '$CI_MERGE_REQUEST_ID'
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH =~ /^\d{1,2}\.\d{1,2}$/'

.rules_prod:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
    - if: '$CI_COMMIT_BRANCH =~ /^\d{1,2}\.\d{1,2}$/'

.rules_pages:
  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'

.rules_dev:
  rules:
    - if: '$CI_MERGE_REQUEST_ID'
    - if: '$CI_COMMIT_BRANCH =~ /docs-preview/'

#
# Caching keys
#
.cache_gem:
  cache:
    key:
      files:
        - Gemfile.lock
    paths:
      - vendor/ruby

.cache_gem_yarn:
  cache:
    key:
      files:
        - Gemfile.lock
        - yarn.lock
    paths:
      - vendor/ruby
      - .yarn-cache/

###############################################
#             Build the website               #
###############################################

.build_base:
  stage: build
  extends:
    - .cache_gem_yarn
    - .retry
  script:
    - yarn install --cache-folder .yarn-cache
    - bundle exec rake setup_git default
    - bundle exec nanoc compile -VV
    # Symlink all README.html to index.html so that we can have clean URLs
    - for i in `find public -name README.html`; do ln -sf README.html $(dirname $i)/index.html; done
    # Remove CE dir and symlink EE to CE
    - if [ $CI_PIPELINE_SOURCE != 'pipeline' ]; then cd public && rm -rf ce && ln -s ee ce; fi
  artifacts:
    paths:
      - public
    expire_in: 1d


#
# Compile only on master and stable branches
#
compile_prod:
  extends:
    - .rules_prod
    - .build_base
  variables:
    NANOC_ENV: 'production'

#
# Compile on all branches except master
#
compile_dev:
  extends:
    - .rules_dev
    - .build_base

###############################################
#              Test the website               #
###############################################

#
# Test internal links and anchors with nanoc
#
test_internal_links_and_anchors:
  extends:
    - .rules_site_tests
    - .cache_gem
  stage: test
  script:
    - bundle exec nanoc check internal_links
    - bundle exec nanoc check internal_anchors

#
# Run rspec tests
#
rspec:
  extends:
    - .rules_site_tests
    - .cache_gem
  stage: test
  script:
    - bundle exec rspec

#
# Run JavaScript tests
#
jest:
  extends:
    - .rules_site_tests
    - .cache_gem_yarn
  stage: test
  script:
    - yarn install --cache-folder .yarn-cache
    - yarn test

#
# Lint JavaScript
#
js_lint:
  extends:
    - .rules_site_tests
    - .cache_gem_yarn
  stage: test
  script:
    - yarn install --cache-folder .yarn-cache
    - yarn eslint
    - yarn prettier

#
# SCSS linting
#
stylelint:
  extends:
    - .rules_site_tests
    - .cache_gem_yarn
  stage: test
  script:
    # Remove the first three lines so the frontmatter doesn't
    # cause stylelint to throw errors.
    - yarn install --cache-folder .yarn-cache
    - sed -i -E '1,3d' content/assets/stylesheets/*.scss
    - yarn run stylelint content/assets/stylesheets/*.scss

#
# Yamllint of *.yml for .gitlab-ci.yml.
# This uses rules from project root `.yamllint`.
#
yaml_lint:
  extends:
    - .rules_site_tests
  stage: test
  image: sdesbure/yamllint:latest
  before_script: []
  dependencies: []
  script:
    - yamllint .gitlab-ci.yml content/_data

#
# Check for broken external links, weekly pipelines only
#
test_external_links:
  extends:
    - .cache_gem
  stage: test
  script:
    - bundle exec nanoc check external_links
  rules:
    - if: '$CI_PIPELINE_SOURCE != "schedule"'
      when: never
    - if: '$PIPELINE_SCHEDULE_TIMING == "weekly"'
      allow_failure: true
    - if: '$PIPELINE_SCHEDULE_TIMING == "hourly"'
      when: manual
      allow_failure: true

###############################################
#               Review Apps                   #
###############################################

#
# Deploy the Review App on a dev server
#
review:
  stage: deploy
  extends:
    - .rules_dev
    - .retry
  variables:
    GIT_STRATEGY: none
  dependencies:
    - compile_dev
  before_script: []
  cache: {}
  script:
    # Rsync to the Pages dir
    - rsync -av --delete public /srv/nginx/pages/$CI_COMMIT_REF_SLUG
    # Remove public directory so that the next review app can run in a
    # clean environment (limitation of the shell executor).
    - rm -rf public
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    url: http://$CI_COMMIT_REF_SLUG.$APPS_DOMAIN
    on_stop: review_stop
  tags:
    - nginx
    - review-apps

#
# Stop the Review App
#
review_stop:
  stage: deploy
  extends:
    - .retry
  variables:
    GIT_STRATEGY: none
  dependencies: []
  artifacts: {}
  before_script: []
  cache: {}
  script:
    - rm -rf public /srv/nginx/pages/$CI_COMMIT_REF_SLUG
  environment:
    name: review/$CI_COMMIT_REF_SLUG
    action: stop
  rules:
    - if: '$CI_MERGE_REQUEST_ID || $CI_COMMIT_BRANCH =~ /docs-preview/'
      allow_failure: true
      when: manual
  tags:
    - nginx
    - review-apps

###############################################
#          GitLab Pages (production)          #
###############################################

#
# Deploy to production with GitLab Pages
#
pages:
  extends:
    - .rules_pages
    - .retry
  image: registry.gitlab.com/gitlab-org/gitlab-docs:latest
  stage: deploy
  variables:
    GIT_STRATEGY: none
  before_script: []
  cache: {}
  environment:
    name: production
    url: https://docs.gitlab.com
  dependencies:
    - compile_prod    # Contains the public directory
  script:
    #
    # We want to use the artifacts of the compile_prod job as
    # the latest docs deployment, and the other versions are
    # taken from /usr/share/nginx/html which are included in
    # the image we pull from.
    #
    - mv /usr/share/nginx/html/1* public/

    #
    # Check the size before minifying
    #
    - du -sh public/

    #
    # Minify the assets of the resulting site. The single versions
    # will be minified eventually when the minification propagates
    # to all versions that are included in gitlab-docs:latest
    # (around 12.7), but we also need to minify the content we
    # pull from master. Currently, there's no way to exclude
    # files or directories when minifying, so we minify the whole
    # site (even the versions that are already minified).
    # TODO: Move to top.
    # When all versions are minified, we can move this script
    # to run first and avoid minifying the already minified versions.
    #
    - /scripts/minify-assets.sh ./ public/

    #
    # Check the size after minifying
    #
    - du -sh public/
  artifacts:
    paths:
      - public
    expire_in: 1d

###############################################
#           Docker images builds              #
###############################################

#
# Reuse some common commands
#
.docker_prepare:
  extends:
    - .retry
  image: docker:19.03.5
  tags:
    - gitlab-org-docker
  services:
    - docker:19.03.5-dind
  before_script:
    - docker info
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY

#
# GitLab docs lint image containing all test tools
#
image:docs-lint:
  extends:
    - .rules_scheduled
    - .docker_prepare
  stage: build-images
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:lint
    DOCKERFILE: dockerfiles/Dockerfile.gitlab-docs-lint
  script:
    - docker build --build-arg CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} -t $IMAGE_NAME -f $DOCKERFILE .
    - docker push $IMAGE_NAME
  environment:
    name: registry/docs-lint

#
# GitLab docs image
#
image:gitlab-docs-base:
  extends:
    - .rules_scheduled_manual
    - .docker_prepare
  stage: build-images
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:base
    DOCKERFILE: dockerfiles/Dockerfile.gitlab-docs-base
  script:
    - docker build -t $IMAGE_NAME -f $DOCKERFILE .
    - docker push $IMAGE_NAME
  environment:
    name: registry/docs-base

#
# Helper Docker image containing all build dependencies.
# It must be rebuilt every time Gemfile and/or Gemfile.lock changes.
#
image:bootstrap:
  extends:
    - .rules_scheduled
    - .docker_prepare
  stage: build-images
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:bootstrap
    DOCKERFILE: dockerfiles/Dockerfile.bootstrap
  script:
    - docker build -t $IMAGE_NAME -f $DOCKERFILE .
    - docker push $IMAGE_NAME
  environment:
    name: registry/docs-bootstrap

#
# Helper Docker image that builds the gitlab-docs website
#
image:builder-onbuild:
  extends:
    - .rules_scheduled_manual
    - .docker_prepare
  stage: build-images
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:builder-onbuild
    DOCKERFILE: dockerfiles/Dockerfile.builder.onbuild
  script:
    - docker build -t $IMAGE_NAME -f $DOCKERFILE .
    - docker push $IMAGE_NAME
  environment:
    name: registry/builder-onbuild

#
# Helper Docker image that copies the final HTML files in a smaller image
# (no rubygems included)
#
image:nginx-onbuild:
  extends:
    - .rules_scheduled_manual
    - .docker_prepare
  stage: build-images
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:nginx-onbuild
    DOCKERFILE: dockerfiles/Dockerfile.nginx.onbuild
  script:
    - docker build -t $IMAGE_NAME -f $DOCKERFILE .
    - docker push $IMAGE_NAME
  environment:
    name: registry/nginx-onbuild

#
# Final Docker image containing a single version
# It is based on Dockerfile.single for each branch
#
image:docs-single:
  extends:
    - .docker_prepare
  stage: pre-deploy
  artifacts: {}
  cache: {}
  dependencies: []
  variables:
    NANOC_ENV: 'production'
    IMAGE_NAME: $CI_REGISTRY_IMAGE:$CI_COMMIT_REF_NAME
    DOCKERFILE: Dockerfile.$CI_COMMIT_REF_NAME
  environment:
    name: registry/$CI_COMMIT_REF_SLUG
  script:
    - docker build --build-arg NANOC_ENV=${NANOC_ENV} --build-arg CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} -t $IMAGE_NAME -f $DOCKERFILE .
    - docker push $IMAGE_NAME
  # Only branches with versions like 10.4
  rules:
    - if: '$CI_COMMIT_BRANCH =~ /^\d{1,2}\.\d{1,2}$/'

#
# Final Docker image containing all the archives
#
image:docs-archives:
  extends:
    - .rules_scheduled
    - .docker_prepare
  stage: pre-deploy
  artifacts: {}
  cache: {}
  dependencies: []
  variables:
    IMAGE_NAME: $CI_REGISTRY_IMAGE:archives
  environment:
    name: registry/archives
  script:
    - docker build -t $IMAGE_NAME -f dockerfiles/Dockerfile.archives .
    - docker push $IMAGE_NAME

#
# Build master containing the online archives and latest docs (on schedules)
#
image:docs-latest:
  extends:
    - .rules_scheduled
    - .docker_prepare
  stage: pre-deploy
  artifacts: {}
  cache: {}
  dependencies: []
  variables:
    NANOC_ENV: 'production'
    IMAGE_NAME: $CI_REGISTRY_IMAGE:latest
    DOCKERFILE: Dockerfile.$CI_COMMIT_REF_NAME
  environment:
    name: registry/latest
  script:
    - docker build --build-arg NANOC_ENV=${NANOC_ENV} --build-arg CI_COMMIT_REF_NAME=${CI_COMMIT_REF_NAME} -t $IMAGE_NAME -f $DOCKERFILE .
    - docker push $IMAGE_NAME
